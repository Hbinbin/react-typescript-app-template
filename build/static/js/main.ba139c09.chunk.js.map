{"version":3,"sources":["serviceWorker.ts","common/env.ts","common/config.ts","mobx/user.mobx.ts","mobx/rootMobx.ts","components/Dashboard.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ENV","env","Config","action","bound","name","this","observable","configure","enforceActions","rootMobx","userMobx","Home","lazy","My","Name","fallback","exact","path","render","to","component","App","Dashboard","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAaoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCjBeC,E,kCAAAA,EACHC,IAA6B,MAG/CL,OAAOI,IAAMA,ECJb,IAAME,EAAkB,GAIxBN,OAAOM,OAASA,E,MACDA,I,4DCGA,G,MAAA,I,EALZC,IAAOC,M,oIACGC,GACTC,KAAKD,KAAOA,M,uCAJbE,K,wEAAkB,Y,kHCCrBC,YAAU,CACRC,gBAAgB,IAGlB,IAGeC,EAHS,CACtBC,Y,QCNIC,EAAOC,gBAAK,kBAAM,gCAClBC,EAAKD,gBAAK,kBAAM,gCAuBPE,EAhBU,SAAC,GAGxB,OAHiC,eAI/B,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,aACjD,kBAAC,IAAD,CAAOF,KAAK,QAAQG,UAAWT,IAC/B,kBAAC,IAAD,CAAOM,KAAK,MAAMG,UAAWP,QCHxBQ,EAVO,kBACpB,kBAAC,IAAaZ,EACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,UAAWE,QCH1BC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba139c09.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","\n// 全局API域名配置\nexport default class ENV {\n  static readonly env: 'dev' | 'bts' | 'prd' = 'dev'\n}\n\nwindow.ENV = ENV\n","\n/** 全局p配置 */\nconst Config: IConfig = {\n\n}\n\nwindow.Config = Config\nexport default Config\n","import { observable, action } from 'mobx'\n\nclass UserStore {\n  @observable name = 'haohao'\n\n  @action.bound\n  chaneName (name: string) {\n    this.name = name\n  }\n}\nexport default new UserStore()\n","import { configure } from 'mobx'\nimport userMobx from './user.mobx'\n\n// mobx配置\nconfigure({\n  enforceActions: true\n})\n\nconst rootMobx: IMobx = {\n  userMobx,\n}\nexport default rootMobx\n","import React, { FC, lazy, Suspense } from 'react'\nimport { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\n\nconst Home = lazy(() => import('@pages/home/Home'))\nconst My = lazy(() => import('@pages/my/My'))\n// interface\ninterface IProps extends IMobx {\n}\ninterface IState {\n}\n\nconst Name: FC<IProps> = ({ }) => {\n  const initialState: IState = {\n  }\n  return (\n    <Suspense fallback={null}>\n      <Router>\n        <Switch>\n          <Route exact path='/' render={() => <Redirect to='/home' />} />\n          <Route path='/home' component={Home} />\n          <Route path='/my' component={My} />\n        </Switch>\n      </Router>\n    </Suspense>\n  )\n}\n\nexport default Name\n","import React from 'react'\nimport '@css/index.scss'\nimport { Provider } from 'mobx-react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport rootMobx from '@mobx/rootMobx'\nimport { Dashboard } from '@cps'\n\nconst App: React.FC = () => (\n  <Provider {...rootMobx}>\n    <Router>\n      <Switch>\n        <Route component={Dashboard} />\n      </Switch>\n    </Router>\n  </Provider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport '@common/env' // 全局API域名配置\nimport '@common/config' // 全局配置\nimport '@css/index.scss' // 全局css样式\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.ts","components/Hello.tsx","App.tsx","redux/rootReducer.ts","utils/utils.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Hello","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","Component","App","components_Hello","combineReducers","isDebug","localStorage","getItem","isDev","process","isPrd","isComputerBrower","ua","navigator","userAgent","toLowerCase","sysPlatform","platform","isIpad","includes","isAndroid","isIOS","isIphoneX","screen","height","width","isWeixin","isWeixinMiniProgram","__wxjs_environment","isWeixinBrower","isPhone","isAliPayMiniProgram","getPlatform","require","store","createStore","rootReducer","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","compose","ReactDOM","render","es","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2ICCWC,qBAdb,SAAAA,EAAaC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACvBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFUP,wEAOvB,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,wCAVYE,cCQLC,EARO,WACpB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACI,EAAD,QCLSC,cAAgB,ICsCxB,MAtCE,CACLC,QAA6C,MAApCC,aAAaC,QAAQ,WAC9BC,OAAOC,EACPC,OAAOD,GCMHJ,YAASK,UACTC,EDHD,WACL,IAAMC,EAAKC,UAAUC,UAAUC,cACzBC,EAAcH,UAAUI,SAASF,cACjCG,EAASN,EAAGO,SAAS,QACrBC,EAAYR,EAAGO,SAAS,WACxBE,EAAQT,EAAGO,SAAS,aACpBG,EAAYD,GAAUE,OAAOC,QAAU,KAAOD,OAAOE,OAAS,IAC9DC,EAAWd,EAAGO,SAAS,kBACvBQ,EAAsBD,GAAYd,EAAGO,SAAS,gBAAgD,gBAA9BpC,OAAO6C,mBACvEC,EAAiBH,IAAaC,GAAqD,YAA9B5C,OAAO6C,mBAGlE,MAAO,CACLR,YACAC,QACAS,QAASV,GAAaC,EACtBH,SACAI,YACAX,iBARuBK,EAAYG,SAAS,QAAUH,EAAYG,SAAS,OAS3EO,WACAC,sBACAE,iBACAE,oBAX0BnB,EAAGO,SAAS,iBCRba,GAArBrB,mBAEFD,IAAUC,GAAqBN,IAEnC,IADiB4B,EAAQ,KAI3B,IAAMC,EAAQxB,EACZyB,YAAYC,EAAaC,YAAgBC,MAEzCvD,OAAOwD,6BACLJ,YAAYC,EAAaI,YAAQH,YAAgBC,KAAQvD,OAAOwD,iCAEhEJ,YAAYC,EAAaC,YAAgBC,MAI7CG,IAASC,OACP7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUT,MAAOA,GACfrC,EAAAC,EAAAC,cAAC6C,EAAD,OAGFC,SAASC,eAAe,SLuGpB,kBAAmBjC,WACrBA,UAAUkC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb7d5126.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, { Component } from 'react'\n// import { connect } from 'react-redux'\nimport '@css/hello.css'\n\nclass Hello extends Component {\n  constructor (props: any) {\n    super(props)\n    this.state = {\n\n    }\n  }\n  render () {\n    return (\n      <div className='hello'>\n        <h2>Lying on the beach</h2>\n      </div>\n    )\n  }\n}\nexport default Hello\n","import React from 'react'\nimport '@css/App.css'\nimport Hello from '@cps/Hello'\n\nconst App: React.FC = () => {\n  return (\n    <div className='App'>\n      <Hello />\n    </div>\n  )\n}\n\nexport default App\n","\nimport { combineReducers } from 'redux'\nexport default combineReducers({\n})\n","/** 获取当前开发环境 */\nexport function getEnv () {\n  return {\n    isDebug: localStorage.getItem('isDebug') === '1',\n    isDev: process.env.NODE_ENV === 'development', // 本地开发环境\n    isPrd: process.env.NODE_ENV === 'production' // 生产环境\n  }\n}\n/** 获取当前系统信息 */\nexport function getPlatform () {\n  const ua = navigator.userAgent.toLowerCase()\n  const sysPlatform = navigator.platform.toLowerCase()\n  const isIpad = ua.includes('ipad')\n  const isAndroid = ua.includes('android')\n  const isIOS = ua.includes('iphone os')\n  const isIphoneX = isIOS && (screen.height >= 812 && screen.width >= 375)\n  const isWeixin = ua.includes('micromessenger')\n  const isWeixinMiniProgram = isWeixin && ua.includes('miniprogram') || window.__wxjs_environment === 'miniprogram'\n  const isWeixinBrower = isWeixin && !isWeixinMiniProgram || window.__wxjs_environment === 'browser'\n  const isComputerBrower = sysPlatform.includes('win') || sysPlatform.includes('mac')\n  const isAliPayMiniProgram = ua.includes('alipayclient')\n  return {\n    isAndroid,\n    isIOS,\n    isPhone: isAndroid || isIOS,\n    isIpad,\n    isIphoneX,\n    isComputerBrower, // 电脑浏览器\n    isWeixin, // 微信环境\n    isWeixinMiniProgram, // 小程序环境\n    isWeixinBrower, // 微信浏览器环境（android下无法判断）\n    isAliPayMiniProgram // 支付宝小程序\n  }\n}\n/**\n * url参数查询\n * @static\n * @param {String} url - url地址\n * @param {String} query - 查询参数\n */\nexport const getParams = (url: string = location.search, query: string) => {\n  const paramStr = url.split('?')[1]\n  const paramArr = paramStr && paramStr.split('&') || []\n  const params: any = {}\n  paramArr.forEach((param, i) => {\n    const paramData = param.split('=')\n    params[paramData[0]] = paramData[1]\n  })\n  return query ? params[query] : params\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport '@css/index.css'\nimport App from './App'\nimport rootReducer from '@redux/rootReducer'\nimport { getEnv, getPlatform } from '@utils/utils'\nconst { isDebug, isPrd } = getEnv()\nconst { isComputerBrower } = getPlatform()\n// 非生产环境开启vconcole或debug模式强制开启vconcole（仅用于手机端H5的调试）\nif ((!isPrd && !isComputerBrower) || isDebug) {\n  const VConsole = require('vconsole')\n  new VConsole()\n}\n// redux store配置\nconst store = isPrd ? (\n  createStore(rootReducer, applyMiddleware(thunk))\n) : (\n  window.__REDUX_DEVTOOLS_EXTENSION__ ? (\n    createStore(rootReducer, compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__()))\n  ) : (\n    createStore(rootReducer, applyMiddleware(thunk))\n  )\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}